{"version":3,"sources":["data.js","App.js","serviceWorker.js","index.js"],"names":["generateData","numPoints","coeff","sigma","arguments","length","undefined","tf","_ref","a","b","c","xs","two","ys","mul","pow","add","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","console","consolePrint","bind","assertThisInitialized","epochs","learningRate","predict","loss","train","beginTrain","handleChange","clearConsole","event","target","name","parseInt","value","parseFloat","setState","message","messages","push","predictions","labels","sub","square","mean","x","_this2","_this3","optimizer","sgd","_loop","i","minimize","preds","dataSync","pop","Math","random","trainingData","react_default","createElement","className","style","padding","Paper_default","paddingLeft","Grid_default","container","item","TextField_default","label","type","InputLabelProps","shrink","margin","min","step","onChange","Button_default","variant","color","marginTop","marginBottom","onClick","backgroundColor","align","Divider_default","light","map","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3d96ce73.chunk.js","sourcesContent":["import * as tf from '@tensorflow/tfjs';\r\n\r\nexport function generateData(numPoints, coeff, sigma = 0.04) {\r\n    return tf.tidy(() => {\r\n        const [a, b, c] = [\r\n            tf.scalar(coeff.a), tf.scalar(coeff.b), tf.scalar(coeff.c)\r\n        ];\r\n\r\n        const xs = tf.randomUniform([numPoints], -1, 1);\r\n\r\n        // Generate polynomial data\r\n        const two = tf.scalar(2)\r\n        const ys = a.mul(xs.pow(two)).add(b.mul(xs)).add(c).add(tf.randomNormal([numPoints], 0, sigma));\r\n        return {\r\n            xs,\r\n            ys: ys\r\n        };\r\n    })\r\n}","import React, { Component } from 'react';\nimport './App.css';\nimport Button from '@material-ui/core/Button';\nimport * as tf from '@tensorflow/tfjs';\nimport {generateData} from \"./data\";\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport TextField from '@material-ui/core/TextField';\nimport Divider from '@material-ui/core/Divider';\n\nclass App extends Component {\n\n    constructor(props){\n        super(props);\n\n        this.state = {}\n        this.state.console = []\n        this.consolePrint = this.consolePrint.bind(this);\n\n        this.state.coeff = {a: 0.2, b: 0.2, c: 0.2};\n        this.epochs = 250;\n        this.numPoints = 1000;\n        this.learningRate = 0.1;\n\n        this.predict = this.predict.bind(this);\n        this.loss = this.loss.bind(this);\n        this.train = this.train.bind(this);\n        this.beginTrain = this.beginTrain.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.clearConsole = this.clearConsole.bind(this);\n    }\n\n    handleChange(event) {\n        if (event.target.name === 'epochs') {\n            this.epochs = parseInt(event.target.value);\n        }\n        else{\n            const coeff = this.state.coeff;\n            coeff[event.target.name] = parseFloat(event.target.value);\n            this.setState({coeff: coeff});\n        }\n    }\n\n    consolePrint(message) {\n        const messages = this.state.console;\n        messages.push(message);\n        this.setState({console: messages});\n    }\n\n    loss(predictions, labels) {\n        const mse = predictions.sub(labels).square().mean();\n        return mse;\n    }\n\n    predict(x) {\n        return tf.tidy(() => {\n            const two = tf.scalar(2)\n            return this.a.mul(x.pow(two)).add(this.b.mul(x)).add(this.c);\n        });\n    }\n\n    train(xs, ys, epochs) {\n        const optimizer = tf.train.sgd(this.learningRate);\n\n        for (let i=0; i<epochs; i++) {\n            optimizer.minimize(() => {\n                const preds = this.predict(xs);\n                const loss = this.loss(preds, ys);\n                if (i % (epochs / 10) === 0) {\n                    this.consolePrint('Epoch: ' + (i + 1) + ' Loss: ' + loss.dataSync())\n                }\n                return loss;\n            });\n        }\n    }\n\n    clearConsole() {\n        const messages = this.state.console;\n        while (messages.pop() !== undefined){\n            // nothing\n        }\n        this.setState({console: messages});\n    }\n\n    async beginTrain() {\n        this.clearConsole();\n        this.a = tf.variable(tf.scalar(Math.random()));\n        this.b = tf.variable(tf.scalar(Math.random()));\n        this.c = tf.variable(tf.scalar(Math.random()));\n\n        this.consolePrint('Tensorflow variables generated.')\n        this.consolePrint('Using MSE loss and SGD optimizer.')\n\n        this.trainingData = generateData(this.numPoints, this.state.coeff);\n\n        this.consolePrint(this.numPoints + ' data points generated.');\n        this.consolePrint('Initial coefficient values: ['+ this.a.dataSync() +', '+ this.b.dataSync() +', '+ this.c.dataSync() +']')\n        this.consolePrint('=== Training starts ===')\n        await this.train(this.trainingData.xs, this.trainingData.ys, this.epochs);\n\n        this.consolePrint('=== Training ends ===')\n        this.consolePrint('Final coefficient values: ['+ this.a.dataSync() +', '+ this.b.dataSync() +', '+ this.c.dataSync() +']')\n    }\n\n    render() {\n        return (\n            <div className={'body'} style={{'padding': '20px'}}>\n                <div className={'controls'}>\n                    <Paper style={{padding: 5, paddingLeft: 20}}>\n                        <Grid container>\n                            <Grid item xs>\n                                <TextField\n                                    label=\"A coefficient\"\n                                    type=\"number\"\n                                    name={'a'}\n                                    InputLabelProps={{\n                                        shrink: true,\n                                    }}\n                                    margin=\"normal\"\n                                    min={0}\n                                    step={0.01}\n                                    onChange={this.handleChange}\n                                />\n                            </Grid>\n                            <Grid item xs>\n                                <TextField\n                                    label=\"B Coefficient\"\n                                    type=\"number\"\n                                    name={'b'}\n                                    InputLabelProps={{\n                                        shrink: true,\n                                    }}\n                                    margin=\"normal\"\n                                    onChange={this.handleChange}\n                                />\n                            </Grid>\n                            <Grid item xs>\n                                <TextField\n                                    label=\"C coefficient\"\n                                    type=\"number\"\n                                    name={'c'}\n                                    InputLabelProps={{\n                                        shrink: true,\n                                    }}\n                                    margin=\"normal\"\n                                    min={0}\n                                    step={0.01}\n                                    onChange={this.handleChange}\n                                />\n                            </Grid>\n                            <Grid item xs>\n                                <TextField\n                                    label=\"Epochs\"\n                                    type=\"number\"\n                                    name={'epochs'}\n                                    InputLabelProps={{\n                                        shrink: true,\n                                    }}\n                                    margin=\"normal\"\n                                    onChange={this.handleChange}\n                                />\n                            </Grid>\n                        </Grid>\n                        <Button variant=\"contained\" color=\"primary\" style={{marginTop: 10, marginBottom: 10}} onClick={this.beginTrain}>\n                            Start Training\n                        </Button>\n                    </Paper>\n                </div>\n                <br/>\n                <Paper style={{padding: 5, paddingLeft: 20, backgroundColor: \"#222\", color: \"white\"}}>\n                    <h2 align={'center'}>Tensorflow JS Polynomial Regression</h2>\n                    {<h4 align={'center'}>y = {this.state.coeff.a} x<sup>2</sup> + {this.state.coeff.b} x + {this.state.coeff.c}</h4>}\n\n                    <Divider light />\n\n                    {this.state.console.map(value => (\n                        <pre key={Math.random()}>&gt;&nbsp;{value}</pre>\n                    ))}\n\n                </Paper>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}